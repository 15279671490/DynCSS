doctype html
html
	head(lang="en")
		title A simple login 
		meta(http-equiv="content-type", content="text/html, charset=UTF-8")
		meta(name="description", content="")
		meta(name="keywords", content="")
		meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0")
		// if lt IE 9
			script(type="text/javascript", src="js/html5shiv.js")
		link(href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css", rel="stylesheet")
		link(rel="stylesheet", type="text/css", href="//highlightjs.org/static/styles/obsidian.css")
		link(rel="stylesheet", href="css/client.css", type="text/css")
	body
		//- BEM Rules.
		.overlay
		.header
			.header__title
				strong Dyn
				|CSS
			.header__sub-title Simple dynamic CSS rules to give life to your sites.

			.header__buttons
				a.header__button Download
				a.header__button Star
				a.header__button Docs

		.sub-header 
			.sub-header__actions 
			
				.sub-header__action 
					i.sub-header__action__icon.fa.fa-cloud-download
					.sub-header__action__text Install
					.sub-header__action__desc
						:markdown
							```shell
							$ bower install DynCSS
							```

				.sub-header__action 
					i.sub-header__action__icon.fa.fa-html5
					.sub-header__action__text Include
					.sub-header__action__desc
						:markdown
							```html
							...
							<script src='...dyncss.min.js'
															type='text/javascript' />
							...
							```


				.sub-header__action
					i.sub-header__action__icon.fa.fa-gamepad
					.sub-header__action__text Enjoy
					.sub-header__action__desc
						:markdown
							```css
							i.fa.fa-gamepad {
									-dyn-webkit-transform:   
												'"rotate(\#{@w-scrollTop}deg) "';
							}
							```

			.sub-header__container
				hr.sub-header__container__separator 

				.sub-header__container__short_desc
					:markdown
						# What is it? 

						DynCSS can parse your CSS for additional `-dyn-` rules. These 
						rules are evaluated on browser's events like `scroll` and 
						`resize` and applied to the CSS attribute you have specified.

						Rules can be defined by referring to important properties of the 
						document that are evaluated dynamically. For example, this will 
						center vertically `.header`, dynamically changing the position as 
						the window is resized:

						```css 
						.header {
							-dyn-margin-top: 		 '(@w-height - @i-height)/2.0';
						}
						```

						Here, `@w-height` is the dynamic height of the window and 
						`@i-height` is the dynamic height of the current element (`.header` in this case). The 
						header of this page has been centered in this way. 

						You can even create parallax effects by using the window's `scrollTop` and dynamically
						apply a CSS 3d transform:

						```css 
						.header {
							-dyn-webkit-transform:   '"translate( 0px , \#{-1*@w-scrollTop}px) "';
						}	
						``` 

						Since the transform value is a string, we should dynamically create one with 
						the specific value of vertical displacement, by interpolating it with `\#{..}`. 

				.sub-header__container__short_desc
					:markdown

						# Features 

						You can transform any CSS property — provided that it is writable
						by jQuery's `.css()` method — by appending the `-dyn-` prefix and specifying
						a quoted javascript expression.

						You can use placeholders to access the dynamic info of the document;
						here's a list of built-in placeholders you can use: 

						| Prefixes | Description |
						|---|---|
						| `@w-foo` |  dynamically evaluates `window.foo()`|
						| `@i-foo` |  dynamically evaluates `$(current-selector).css(foo)` |
						| `@j-foo` |  dynamically evaluates `$(current-selector).foo()` |
						
						The syntax for the rules should be relatively painless even if you use CSS preprocessors.
						I am even using it in a `.less` file that compiles without any complaints.

						# Custom functions 
						You can introduce custom functions to be evaluated at run-time,  by
						adding them to `window.dynCss.lib`. For example, here's how you can introduce 
						a center function that returns the centers of the current window:

						```css
						window.dynCss.lib.center = function() {
							return {x: window.width()/2, y: window.height()/2 };
						}
						```

						To use it in a rule, invoke it with the `@` prefix:

						```css
							-dyn-margin-left: '@center().x';
						```

				.sub-header__container__short_desc
					:markdown

						# Responsiveness
						DynCSS allows to easily program responsiveness in your CSS. 
						To do so you define a list of *breakpoints* and 
						the dynamic variable to watch (which is typically the size of the window). You can do this in a `<script>` tag 
						in your HTML; here's how you set two breakpoints at 481 and 961 on the window's width 
						variable `@w-width`:

						```html
						<script> 
							window.dynCss.api.setBreakpoints([481,961],'@w-width');
						</script>
						```

						Now, you can define how each property behaves above an below the breakpoints;
						for example, we can change dynamically the font size:

						```css 
						.header__title {
								-dyn-font-size : '@selectFrom(["3em", "4em", "5em"])';
						}
						```	
						In this way, font size will be 3em under 480px, 4em under 960px, and 5em above 960px.


				.sub-header__container__examples

				.sub-header__container__api
				

		.footer 

		script(type="text/javascript", src="js/vendor.js")
		script(type="text/javascript", src="js/client.js")

		script.
			window.dynCss.api.setBreakpoints([481,961],'@w-width');

		script(src='//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.0/highlight.min.js')
		script.
			hljs.initHighlightingOnLoad();                                      
   
		// if IE
			script(type="text/javascript", src="js/placeholder.js")